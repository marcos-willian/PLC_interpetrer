functor PlcLexerFun(structure Tokens: PlcParser_TOKENS)=
   struct
    structure UserDeclarations =
      struct
(* Plc Lexer *)

(* User declarations *)

open Tokens
type pos = int
type slvalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (slvalue, pos)token

(* A function to print a message error on the screen. *)
val error = fn x => TextIO.output(TextIO.stdOut, x ^ "\n")
val lineNumber = ref 0
val pos = ref 0

(* Get the current line being read. *)
fun getLineAsString() =
    let
        val lineNum = !lineNumber
    in
        Int.toString lineNum
    end

(* Define what to do when the end of the file is reached. *)
fun eof () = Tokens.EOF(!pos,!pos)

(* Initialize the lexer. *)
fun init() = ()
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\000\000\000\000\000\000\000\000\000\042\042\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\042\040\006\000\000\000\038\000\025\024\023\022\021\019\000\018\
\\017\017\017\017\017\017\017\017\017\017\015\014\012\010\000\000\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\009\000\008\000\006\
\\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\006\006\006\006\006\006\006\005\004\003\000\000\
\\000"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\026\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (26, 
"\027\027\027\027\027\027\027\027\027\027\000\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027"
),
 (27, 
"\027\027\027\027\027\027\027\027\027\027\000\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\028\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027"
),
 (28, 
"\027\027\027\027\027\027\027\027\027\027\000\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\029\028\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027"
),
 (29, 
"\027\027\027\027\027\027\027\027\027\027\000\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\030\027\028\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027"
),
 (30, 
"\027\027\027\027\027\027\027\027\027\027\000\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\031\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\027\
\\027"
),
 (31, 
"\032\032\032\032\032\032\032\032\032\032\000\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\034\037\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032"
),
 (32, 
"\032\032\032\032\032\032\032\032\032\032\000\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\033\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032"
),
 (33, 
"\032\032\032\032\032\032\032\032\032\032\000\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\034\033\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032"
),
 (34, 
"\032\032\032\032\032\032\032\032\032\032\000\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\035\032\033\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032"
),
 (35, 
"\032\032\032\032\032\032\032\032\032\032\000\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\036\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\042\042\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 67)], trans = 0},
{fin = [(N 40)], trans = 0},
{fin = [(N 65)], trans = 0},
{fin = [(N 23)], trans = 6},
{fin = [(N 23)], trans = 7},
{fin = [(N 75)], trans = 0},
{fin = [(N 73)], trans = 0},
{fin = [(N 38)], trans = 10},
{fin = [(N 59)], trans = 0},
{fin = [(N 45)], trans = 12},
{fin = [(N 48)], trans = 0},
{fin = [(N 53)], trans = 0},
{fin = [(N 61)], trans = 15},
{fin = [(N 51)], trans = 0},
{fin = [(N 18)], trans = 17},
{fin = [(N 36)], trans = 0},
{fin = [(N 27)], trans = 19},
{fin = [(N 56)], trans = 0},
{fin = [(N 63)], trans = 0},
{fin = [(N 32)], trans = 0},
{fin = [(N 34)], trans = 0},
{fin = [(N 71)], trans = 0},
{fin = [(N 69)], trans = 25},
{fin = [], trans = 26},
{fin = [], trans = 27},
{fin = [], trans = 28},
{fin = [(N 15)], trans = 29},
{fin = [], trans = 30},
{fin = [], trans = 31},
{fin = [], trans = 32},
{fin = [], trans = 33},
{fin = [(N 15)], trans = 34},
{fin = [], trans = 35},
{fin = [], trans = 33},
{fin = [], trans = 33},
{fin = [], trans = 38},
{fin = [(N 30)], trans = 0},
{fin = [(N 25)], trans = 40},
{fin = [(N 43)], trans = 0},
{fin = [(N 2)], trans = 42}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  15 => (lex())
| 18 => let val yytext=yymktext() in Tokens.NUM (valOf (Int.fromString yytext), !pos, !pos) end
| 2 => (lex())
| 23 => let val yytext=yymktext() in case yytext of
                    "fun" => Tokens.FUN (!pos, !pos)
                |   "rec" => Tokens.REC(!pos, !pos)
                |   "if"  => Tokens.IF (!pos, !pos)
                |   "then" => Tokens.THEN(!pos, !pos)
                |   "else" => Tokens.ELSE(!pos, !pos)
                |   "match" => Tokens.MATCH(!pos, !pos)
                |   "with" => Tokens.WITH(!pos, !pos)
                |   "var" => Tokens.VAR(!pos, !pos)
                |   "fn"  => Tokens.FN(!pos, !pos)
                |   "end" => Tokens.END(!pos, !pos)
                |   "Nil" => Tokens.NIL(!pos, !pos)
                |   "Bool"=> Tokens.BOOL(!pos, !pos)
                |   "Int" => Tokens.INT(!pos, !pos)
                |   "false" => Tokens.FALSE(!pos, !pos)
                |   "true" => Tokens.TRUE(!pos, !pos)
                |   "hd" => Tokens.HD(!pos, !pos)
                |   "tl" => Tokens.TL(!pos,!pos)
                |   "print" => Tokens.PRINT(!pos, !pos)
                |   "_" => Tokens.OPunder(!pos, !pos)
                |   "ISE" => Tokens.ISE(!pos, !pos)
                |   _ => Tokens.NAME (yytext, !pos, !pos) end
| 25 => (Tokens.OPnot(!pos, !pos))
| 27 => (Tokens.OPminus(!pos, !pos))
| 30 => (Tokens.OPdisjun(!pos, !pos))
| 32 => (Tokens.OPplus(!pos, !pos))
| 34 => (Tokens.OPtimes(!pos, !pos))
| 36 => (Tokens.OPdiv(!pos, !pos))
| 38 => (Tokens.OPequal (!pos, !pos))
| 40 => (Tokens.OPVbar(!pos, !pos))
| 43 => (Tokens.OPdiff(!pos, !pos))
| 45 => (Tokens.OPless(!pos, !pos))
| 48 => (Tokens.OPlessEq(!pos, !pos))
| 51 => (Tokens.OP2cons(!pos, !pos))
| 53 => (Tokens.OPsemicolon(!pos, !pos))
| 56 => (Tokens.OParrow(!pos, !pos))
| 59 => (Tokens.OP2arrow(!pos, !pos))
| 61 => (Tokens.OPcons(!pos, !pos))
| 63 => (Tokens.OPcolon(!pos, !pos))
| 65 => (Tokens.Lbrace(!pos, !pos))
| 67 => (Tokens.Rbrace(!pos, !pos))
| 69 => (Tokens.Lpar(!pos, !pos))
| 71 => (Tokens.Rpar(!pos, !pos))
| 73 => (Tokens.Lbracket(!pos, !pos))
| 75 => (Tokens.Rbracket(!pos, !pos))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
